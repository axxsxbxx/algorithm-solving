'''
1288. 새로운 불면증 치료법

민석이는 불면증에 걸렸다. 그래서 잠이 안 올 때의 민간요법 중 하나인 양 세기를 하려고 한다.
민석이는 1번 양부터 순서대로 세는 것이 재미없을 것 같아서 N의 배수 번호인 양을 세기로 하였다.
즉, 첫 번째에는 N번 양을 세고, 두 번째에는 2N번 양, … , k번째에는 kN번 양을 센다.
이렇게 숫자를 세던 민석이에게 잠은 더 오지 않고 다음과 같은 궁금증이 생겼다.
이전에 셌던 번호들의 각 자리수에서 0에서 9까지의 모든 숫자를 보는 것은 최소 몇 번 양을 센 시점일까?

예를 들어 N = 1295이라고 하자.
첫 번째로 N = 1295번 양을 센다. 현재 본 숫자는 1, 2, 5, 9이다.
두 번째로 2N = 2590번 양을 센다. 현재 본 숫자는 0, 2, 5, 9이다.
현재까지 본 숫자는 0, 1, 2, 5, 9이다.
세 번째로 3N = 3885번 양을 센다. 현재 본 숫자는 3, 5, 8이다.
현재까지 본 숫자는 0, 1, 2, 3, 5, 8, 9이다.
네 번째로 4N = 5180번 양을 센다. 현재 본 숫자는 0, 1, 5, 8이다.
현재까지 본 숫자는 0, 1, 2, 3, 5, 8, 9이다.
다섯 번째로 5N = 6475번 양을 센다. 현재 본 숫자는 4, 5, 6, 7이다.
현재까지 본 숫자는 0, 1, 2, 3, 4, 5, 6, 7, 8, 9이다.
5N번 양을 세면 0에서 9까지 모든 숫자를 보게 되므로 민석이는 양 세기를 멈춘다.
'''
# 테스트 케이스 수
t = int(input())
test_case = []
for _ in range(t):
    test_case.append(int(input()))

for i, N in enumerate(test_case, start=1):
    # 0부터 9까지 저장되어 있는지 확인
    zero_to_nine = set()
    # N, 2N ... 이렇게 곱해지는 수 base 초기ㅗ하
    base = 1
    # 0부터 9까지 담길 집합의 길이가 10이 되기 전까지 반복
    while len(zero_to_nine) < 10:
        # N, 2N, 3N, 4N ... 의 값을 담을 변수 number 초기화
        number = base * N
        # 만약 number가 한자리수면 바로 결과 셋에 추가
        if number < 10:
            zero_to_nine.add(number)
        # number가 두자리수 이상이라면
        else:
            # 우선 문자열로 바꾼 후에
            num = str(number)
            # 한자리씩 떼서 다시 int형으로 바꿔서 결과 셋에 추가
            for n in num:
                zero_to_nine.add(int(n))
        # 곱할 수에 1을 더해줌
        base += 1
        
    print(f'#{i} {number}')

'''
[입력]
5
1
2
11
1295
1692

[출력]
#1 10
#2 90
#3 110
#4 6475
#5 5076
'''